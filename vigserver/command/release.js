/*　China Fujian Huanyutong Technology Co., Ltd. */
const UglifyJS=require("uglify-es"),path=require("path"),fs=require("fs-extra"),VIGConst=require("../core/const"),walk=require("walk"),{updateYamlFile:updateYamlFile}=require("../utils/yaml"),async=require("async"),YAWN=require("yawn-yaml/cjs"),deepMerge=require("deep-extend"),copyDir=require("../utils/copyDir"),crypto=require("crypto"),md5File=require("md5-file"),os=require("os"),{addVersion:addVersion}=require("../utils/version"),DevicesYAML=path.join(VIGConst.DataRootFolder,"initdata","devices.yaml");function updateDeviceInitAttrs(e,t,o={}){let i=new YAWN(fs.readFileSync(e,{encoding:"utf8"})),s=i.json;s.records||(s.records=[]);for(let e of s.records){let i=!0;for(let o in t)i=e[o]===t[o];i&&deepMerge(e,o)}i.json=s;try{fs.writeFileSync(e,i.yaml)}catch(o){this.log(`Unable update device ${JSON.stringify(t)} in ${e}`),this.log(o.message)}}function copySourceFiles(e,t){let o={followLinks:!1,filters:["node_modules","data/logs","data/sequences","data/storage","data/resources","docsite","test","docsite",".idea",".git",".bin",".gitignore"]},i=[".gitignore","serialno"];return new Promise((s,r)=>{walker=walk.walk(VIGConst.VIGRootFolder,o),this.log("Compressing the source code..."),walker.on("file",(o,s,r)=>{let n=path.relative(VIGConst.VIGRootFolder,o),a=path.join(o,s.name),l=path.join(e,n,s.name),c=path.dirname(l);if(fs.existsSync(c)||fs.mkdirSync(c),a.endsWith(".js"))try{let e={output:{beautify:!1,preamble:"/*　China Fujian Huanyutong Technology Co., Ltd. */"},compress:{}};t.options.sourcemap&&(e.source={filename:l,url:a+".map"});let o=UglifyJS.minify(fs.readFileSync(a,{encoding:"utf8"}),e);fs.writeFileSync(l,o.code,{encoding:"utf8"}),t.options.sourcemap&&fs.writeFileSync(l+".map",o.map,{encoding:"utf8"})}catch(e){this.log(`Error when compress ${a}:${e.message}`)}else try{fs.statSync(a).isDirectory()||i.includes(path.basename(a))||fs.writeFileSync(l,fs.readFileSync(a),{flag:"w",encoding:"utf8"})}catch(e){this.log(`Error when copy ${a}:${e.message}`)}r()}),walker.on("directory",(t,o,i)=>{let s=path.relative(VIGConst.VIGRootFolder,t),r=path.join(e,s);try{fs.existsSync(r)||fs.mkdirSync(r)}catch(e){this.log(`Error when create folder <${r}>:${e.message}`)}i()}),walker.on("errors",(e,t,o)=>{this.log("ERROR:",t),o()}),walker.on("end",function(){console.log("Compressing source code is compete."),s()})})}function copyResourceFiles(e){let t=["node_modules","webroot"];t=t.map(e=>path.join(VIGConst.VIGRootFolder,e));for(let o of t){let t=path.join(e,path.basename(o));fs.existsSync(t)||fs.mkdirs(t),fs.mkdirs(t);try{copyDir.copyDirSync(o,t)}catch(e){this.log(e.message)}}}function setPlatform(e,t){if(void 0!==t.options.platform&&""!==t.options.platform){let o=path.join(e,"settings","default.yaml");updateYamlFile(o,"platform",t.options.platform),this.log(`The hardware platform is specified to <${t.options.platform}>`)}}function updateReleaseConfiture(e,t){this.log("Updating confirure...");let o=path.join(e,"data","initdata","devices.yaml");void 0!==t.options.set&&""!==t.options.set&&this.log("set="+t.options.set),updateDeviceInitAttrs.call(this,o,{sn:"__host__"},{debug:t.options.debug})}function getHostDefaultAttrs(){let e=new YAWN(fs.readFileSync(path.join(VIGConst.DataRootFolder,"initdata","devices.yaml"),{encoding:"utf8"})).json;e.records||(e.records=[]);for(let t of e.records)if("__host__"===t.sn)return t}function getReleaseTempFolder(){let e=os.tmpdir(),t=path.join(e,"vigserver_release");return fs.existsSync(t)||fs.mkdirsSync(t),t}function clearReleaseTempFolder(){let e=path.join(os.tmpdir(),"vigserver_release");fs.emptyDirSync(e)}function getCurrentVersion(){return getHostDefaultAttrs().version||1}function updateVersion(e,t){return t=void 0===t?addVersion(e):t,updateDeviceInitAttrs.call(this,DevicesYAML,{sn:"__host__"},{version:t}),t}function calcProjectMD5(e){let t=["server.js","core/device/manager.js","core/eventbus/eventbus.js"],o="";for(let i of t)o+=md5File.sync(path.join(e,i));let i=crypto.createHash("md5");return i.update(o),i.digest("hex").toLowerCase()}function generateVersionFiles(e,t){let o={version:t,date:new Date,md5:calcProjectMD5(e)};fs.writeFileSync(path.join(e,"version.json"),JSON.stringify(o),{encoding:"utf8"})}function pakcageReleaseFiles(e,t){let o=require("archiver")("zip",{zlib:{level:9}}),i=path.join(t,"vigserver_firmware.zip"),s=fs.createWriteStream(i);return o.pipe(s),new Promise((t,r)=>{s.on("close",()=>{this.log("Release package "+i+" has been generated,total "+o.pointer()+"bytes"),t()}),o.on("error",function(e){r(e)}),o.directory(e+"/",!1),o.finalize()})}function inProjectFolder(e){let t=path.relative(VIGConst.VIGRootFolder,e);return""!==t&&!t.startsWith("..")}module.exports=function(e){e.command("release","Release project").option("-o, --output <outputFolder>","Output folder").option("-f, --full","Copy all files,default without copy <node_modules,webroot> folder").option("-p, --platform <name>","Specify target hardware platform").option("-v, --version [name]","Specify release version,eg:2.1.0,3.0.1").option("--sourcemap","output sourcemap file,default:false").option("-d, --debug"," Debug enabled/disabled,default=false").option("-z, --zip","default:true,Packaged as zip").types({string:["o","output"]}).validate(function(e){let t,o;e.options.debug||(e.options.debug=!1),e.options.zip||(e.options.zip=!0);let i=path.resolve(VIGConst.VIGRootFolder,"../../release/vigserver");return inProjectFolder(o=e.options.output?path.resolve(e.options.output):i)?(this.log("The output folder is invalid and can not be release to the progject folder."),!1):(e.options.zip?(t=getReleaseTempFolder(),clearReleaseTempFolder()):t=o,e.output=t,e.target=o,e.host=getHostDefaultAttrs(),!0)}).action(function(e,t){let o=e.output,i=e.target;getHostDefaultAttrs();this.log("Prepare release to :"+i),async.series({copySourceCode:async()=>(await copySourceFiles.call(this,o,e),!0),copyResourceFiles:async()=>(e.options.full&&copyResourceFiles.call(this,o,e),!0),setPlatform:async()=>(setPlatform.call(this,o,e),!0),updateReleaseConfiture:async()=>(updateReleaseConfiture.call(this,o,e),!0),updateVersion:async()=>{let t=e.host.version;this.log("Current version:"+t);let i=updateVersion.call(this,t,e.options.version);return updateDeviceInitAttrs.call(this,path.join(o,"data","initdata","devices.yaml"),{sn:"__host__"},{version:i}),generateVersionFiles.call(this,o,i),this.log("Release version:"+String(i)),!0},pakcageReleaseFiles:async()=>(e.options.zip&&(this.log("Start packing..."),await pakcageReleaseFiles.call(this,o,i),clearReleaseTempFolder()),!0)},(e,o)=>{e?this.log(e):(this.log("Release to "+i),this.log("Release is complete.")),t()})})};