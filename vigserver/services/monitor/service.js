/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const ServiceBase=require("core/service/servicebase"),hprose=require("hprose"),VIMPErrors=require("core/protocols/vimp/errors"),{TransactionManager:TransactionManager}=require("core/transactions"),{DeviceEventCodes:DeviceEventCodes,DeviceTransactionResult:DeviceTransactionResult}=require("core/protocols/vimp/constants"),RPCServiceMethods={ping:()=>process.pid,log:(e,r)=>{logger._log(e,r)},progress:async(e,r,t,s)=>{logger.debug(_("Upgrade progress ({tid}):{msg} {value}").params(String(e),t,String(r)));let a=await TransactionManager.get(e);if(a){let i={actor:"monitor",result:s,progress:r,message:t,trigger:"monitor"};await a.addNode(i),0===s?(await a.abort(t),s=DeviceTransactionResult.Error):100===r?(await a.end(t),s=DeviceTransactionResult.Complete):s=DeviceTransactionResult.Progressing,VIGateway.triggerEvent({code:DeviceEventCodes.DeviceTransaction,message:t,tid:e,payload:{progress:r>100?100:r,result:s}})}else logger.debug(_("Upgrage transaction not found"));return!0},restart:()=>(VIServer.end(),!0),reset:e=>(VIServer.reset(e),!0),discover:()=>{1!==VIGateway.mode&&(VIGateway.mode=1)}};class UpgradeService{static async waitForReady(e=!1){let r=await this.RPCClient.isUpdating();if(r){if(!e)throw new VIMPErrors.UnsupportedError(_("Upgrades are in progress"));await this.RPCClient.cancelUpdate();let t=(new Date).getTime(),s=4e4;await new Promise((e,a)=>{let i=()=>{setTimeout(async()=>{try{r=await this.RPCClient.isUpdating()}catch(e){logger.debug(_("Error while call monitor rpc method <isUpdatning> "))}let a=(new Date).getTime()-t;if(r&&a>s)throw new VIMPErrors.UnsupportedError(_("The upgrade is being cancelled"));r&&a<s?setTimeout(i,5e3):e(!1)},2e3)};i()})}return!0}static async start(e){let r=await this.RPCClient.update(e);if(0===r.status)return!0;throw new VIMPErrors.FailError(r.message||_("Error while upgrade"))}}class HostMonitor extends ServiceBase{async onGPIO(e,r,t){this.publishSubjectMessage("gpio",{pin:e,shift:r,value:t})}onDiscover(){try{return VIGateway.mode=1,!0}catch(e){logger.debug(_("Error while switch discover mode:{err}").params(e.message))}return!1}onNotice(e,r){if(1===e)return logger.debug(_("Ready to close the main process for upgrade")),VIServer.end(),!0}onMode(e){return[0,1,2].includes(e)&&(VIGateway.mode=e),VIGateway.mode}onGet(e,r){switch(e=e||"gateway",r=r||"",e){case"gateway":if(!r)return JSON.stringify(VIGateway.attrs,null,4);try{return JSON.stringify(VIGateway.attrs[r],null,4)}catch(e){return"Attr <{name}> is not exists,valid attrs:{attrs}".params(r,R.keys(VIGateway.attrs).join(","))}case"service":if(!r)return"Loaded services:"+VIGServices.modules.map(e=>e.name).join(",");try{return JSON.stringify(VIGServices.getServices(r).attrs,null,4)}catch(e){return"Service <{name}> is not exists".params(r)}case"services":return"Loaded services : "+VIGServices.modules.map(e=>e.name).join(",");case"app":if(!r)return"Apps:"+VIGApps.modules.map(e=>e.name).join(",");try{return JSON.stringify(VIGApps.getApp(r).attrs,null,4)}catch(e){return"App <{name}> is not exists".params(r)}case"apps":return"Loaded apps : "+VIGApps.modules.map(e=>e.name).join(",");case"device":break;case"devicetype":return r?JSON.stringify(VIGDevices.getDeviceType(r).attrs,null,4):"Loaded devicetypes:"+VIGDevices.modules.map(e=>e.name).join(",")}}onService(e){}getDefaultAttrs(){return Object.assign(super.getDefaultAttrs(),{listenOn:"http://127.0.0.1:7001",monitorUrl:"http://127.0.0.1:7000"})}async createRpcServer(){try{this.RPCServer=hprose.Server(this.attrs.listenOn),this.RPCServer.addFunction(RPCServiceMethods.ping,"ping"),this.RPCServer.addFunction(RPCServiceMethods.log,"log"),this.RPCServer.addFunction(RPCServiceMethods.progress,"progress"),this.RPCServer.addFunction(this.onGPIO),this.RPCServer.addFunction(this.onDiscover,"discover"),this.RPCServer.addFunction(this.onNotice,"notice"),this.RPCServer.addFunction(VIServer.reset,"reset"),this.RPCServer.addFunction(VIServer.end,"restart"),this.RPCServer.addFunction(this.onMode,"mode"),this.RPCServer.addFunction(this.onGet,"get"),this.RPCServer.start()}catch(e){logger.error(_("Error while crete rpc server:{err}").params(e.message))}}async createRpcClient(){this.RPCClient=new hprose.HttpClient(this.attrs.monitorUrl,["update","notice","isUpdating","cancelUpdate","readGPIO"]),this.RPCClient.on("error",(e,r)=>{logger.warn(_("Error while call monitor rpc method <{name}>:{err}").params(e,r.message))}),setTimeout(()=>{this.RPCClient.notice(0,0)},1e3)}async start(){this.createRpcServer(),this.createRpcClient()}async stop(){this.RPCServer.close(),this.RPCClient=null,this.RPCServer=null}onMessage(e){}async upgrade(e){return logger.debug(_("Wait for monitor process")),await UpgradeService.waitForReady.call(this,e.force),logger.debug(_("Notice monitor process for upgrade")),await UpgradeService.start.call(this,e)}notice(e,r){return this.RPCClient.notice(e,r)}}module.exports=HostMonitor;