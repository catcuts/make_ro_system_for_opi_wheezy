/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const{TransferBase:TransferBase,TransferStatus:TransferStatus}=require("./base"),{MessageTypes:MessageTypes,MessageTopicNames:MessageTopicNames,DeviceEventCodes:DeviceEventCodes}=require("../../../core/protocols/vimp/constants"),MQTT=require("mqtt"),{asyncWait:asyncWait}=require("utils/asyncutil");class MQTTTransfer extends TransferBase{ready(){void 0===this.settings.retaion&&(this.settings.retaion=!1),void 0===this.settings.qos&&(this.settings.qos=0),void 0===this.settings.dup&&(this.settings.dup=!1),this.topics={},this._subscribed=!1,this.domain=this.host.domain||0,this._deviceTopicRegExp=/^\/voerka\/([\d\D]+)\/devices\/(\w+)\/?(\w+)?/,this._groupTopicRegExp=/^\/voerka\/([\d\D]+)\/groups(.+)/,this.updateTopics()}toString(){return _("Transfer({broker})").params(this.settings.broker)}updateTopics(){this._rootTopic="/voerka",this._domainTopic=this._rootTopic+"/{domain}".params(this.host.domain),this._devicesRootTopic=this._domainTopic+"/devices",this._hostTopic=this._devicesRootTopic+"/{sn}".params(this.host.sn),this._myTopic=this._devicesRootTopic+"/{sn}/#".params(this.host.sn),this._groupsTopic=this._domainTopic+"/groups{path}";let s=this.host.group;s.startsWith("/")||(s="/"+s),this._hostGroupsTopic=this._groupsTopic.params(s),this._broadcastTopic=this._domainTopic+"/broadcast/{name}",this._notifyTopic=this._devicesRootTopic+"/{sn}/notify",this._attrsTopic=this._devicesRootTopic+"/{sn}/attrs",this._actionTopic=this._devicesRootTopic+"/{sn}/actions",this._messageTopic=this._devicesRootTopic+"/{sn}/message",this._heartbeatTopic=this._domainTopic+"/heartbeat",this._registerTopic=this._domainTopic+"/register",this._dataTopic=this._devicesRootTopic+"/{sn}/data",this._queryTopic=this._devicesRootTopic+"/{sn}/query",this._answerTopic=this._devicesRootTopic+"/{sn}/answer"}convertTriggerAddress(s,t={}){let i="";switch(i=this.host.group?this._groupsTopic.params(t.group.startsWith("/")?t.group:"/"+t.group):this._hostTopic,s.type){case MessageTypes.Attrs:i+="$$attrs";break;case MessageTypes.Status:case MessageTypes.Event:case MessageTypes.Alarm:}}convertAddress(s,t={}){let i="",e=s.to?s.to:"";switch(s.from=this.host.sn,s.type){case 0:i=this._registerTopic;break;case 1:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):this._notifyTopic.params(s.to);break;case 2:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):this._attrsTopic.params(e);break;case 4:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):this._actionTopic.params(e);break;case 5:i=this._hostGroupsTopic+"/$$alarms";break;case 6:i=s.payload.code===DeviceEventCodes.AttrsChange?this._hostGroupsTopic+"/$$attrs":s.payload.code===DeviceEventCodes.StatusChange?this._hostGroupsTopic+"/$$status":this._hostGroupsTopic+"/$$events";break;case 7:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):s.payload.room&&s.payload.room.length>0?this._messageTopic.params(s.to)+"/"+s.payload.room.toLowerCase():this._messageTopic.params(s.to);break;case 8:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):s.payload.channel&&s.payload.channel.length>0?this._dataTopic.params(s.to)+"/"+s.payload.room.toLowerCase():this._dataTopic.params(s.to);break;case 9:i=e.startsWith("@")?this._groupsTopic.params(e.substr(1)):this._queryTopic.params(e);break;case 10:i=this._heartbeatTopic;break;case 11:i=""===e?this._domainTopic:e.startsWith("@")?this._groupsTopic.params(e.substr(1)):this._answerTopic.params(e)}return i}async transfer(s,t,i={}){let e={retain:void 0===i.retain?this.settings.retaion:i.retain,Qos:void 0===i.qos?this.settings.qos:i.qos,dup:void 0===i.dup?this.settings.dup:i.dup};try{"string"!=typeof s&&(logger.warn(_("The transfer address datatype can only be a string")),s=String(s),this.onError(_("Transfer address error:").params(s))),this.endpoint.publish(s,t,e)}catch(t){logger.error(_("Error while transfer data to {address}: {err}").params(s,t.stack))}}async broadcast(s,t=0,i={}){let e=this.serializeMessage(s),o=this._broadcastTopic+"/"+String(t);this.transfer(o,e,i)}async subscribe(s,t,i={}){await this.endpoint.subscribe(s,i,t)}onMessage(s,t,i){super.onMessage(t,{topic:s})}deserializeMessage(s,t={}){let i=t.topic,e=super.deserializeMessage(s);void 0===e.token&&(e.token=""),e.flags=Object.assign({qos:0,reply:!1,direct:!1,serialize:0,parity:0,receipt:!0,sync:!1},e.flags||{}),e.__options__={topic:i};let o=[];if(e.to)for(let s of e.to.split(","))if(s.startsWith("@"))o.push(s);else if(s.includes("/")){let[,t]=s.split("/");o.push(t)}else o.push(s);else{let s=i.match(this._deviceTopicRegExp);if(s){let[,t,i,e]=s;MessageTopicNames.includes(e)?o.push(i):o.push(e)}else{let s=i.match(this._groupTopicRegExp);if(s){let[,t,i]=s;o.push("@"+s)}}}return e.to=o.join(","),e}onConnected(){logger.debug(_("MQTT broker {broker} is connected.").params(this.settings.broker)),super.onConnected(),this.subscribeTopics().then(()=>{this._subscribed=!0}).catch(s=>{logger.error(_("Error while subscribed topics :{err} ").params(s.message))})}onHostChange(s){("domain"in s||"group"in s)&&this.subscribeTopics()}async subscribeTopics(){logger.debug(_("Start subscribing to topic messages")),await this.unsubscribeTopics();let s=void 0!==this.settings.strict&&this.settings.strict,t=this.host.broadcastZones||[];this.topics={[this._myTopic]:s?2:1,[this._broadcastTopic.params(0)]:0,[this._hostGroupsTopic]:s?2:1};for(let s of t)this.topics[this._broadcastTopic.params(s.name)]=0;await new Promise((t,i)=>{this.endpoint.subscribe(this.topics,{qos:s?2:1},(s,e)=>{s?(logger.debug(_("Error while subscribe topic:{topics}\n{error}").params(R.keys(this.topics).join(","),s)),i(s)):(this._subscribed=!0,t())})}),logger.debug(_("Subscribed topics : {topics}").params(R.keys(this.topics).join(",")))}async unsubscribeTopics(){if(this._subscribed)return new Promise((s,t)=>{let i=R.keys(this.topics);i.length>0&&this.endpoint.unsubscribe(i,t=>{t?(logger.debug(_("Error while unsubscribe topics:{err}").params(t.message)),s()):(this.topics={},this._subscribed=!1,s())})})}async connect(){let s={clientId:"voerka_{type}_{sn}".params(this.host.type.toLowerCase(),this.host.sn),wsOptions:{},keepalive:0,reschedulePings:!0,protocolId:"MQTT",protocolVersion:4,clean:!0,reconnectPeriod:1e4,connectTimeout:3e4,incomingStore:null,outgoingStore:null,queueQoSZero:!0};Object.assign(s,this.settings),"nedb"===this.settings.store&&(s[incomingStore]=mqttStore.incoming,s[outgoingStore]=mqttStore.outgoing),this.endpoint=MQTT.connect(this.settings.broker,s),this.endpoint.on("connect",this.onConnected.bind(this)),this.endpoint.on("error",this.onError.bind(this)),this.endpoint.on("message",this.onMessage.bind(this)),this.endpoint.on("reconnect",this.onReconnect.bind(this)),this.endpoint.on("close",this.onDisconnected.bind(this)),await asyncWait(()=>{if(this.endpoint)return this.endpoint.connected})}async disconnect(){await this.unsubscribeTopics(),await new Promise((s,t)=>{this.endpoint.end(!0,()=>{s()})}),await asyncWait(()=>!this.endpoint.connected),this.endpoint.removeAllListeners(),this.endpoint=null}async reconnect(){try{this.endpoint.reconnect()}catch(s){logger.warn(_("Error while transfer <{name}> is reconnecting:{err]").params(this.name,s.message))}}}module.exports=MQTTTransfer;