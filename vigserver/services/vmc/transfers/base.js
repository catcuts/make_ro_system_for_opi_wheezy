/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const{serialize:serialize,deserialize:deserialize}=require("../serialize"),VoerkaMessage=require("core/protocols/vimp/message"),{MessageTypes:MessageTypes}=require("core/protocols/vimp/constants"),{compressMessageFlags:compressMessageFlags}=require("../utils");function compressMessage(e){try{[MessageTypes.Heartbeat,MessageTypes.Alarm,MessageTypes.Event].includes(e.type)&&delete e.to,compressMessageFlags(e),delete e.roaming,0===e.tid&&delete e.tid,0===e.sid&&delete e.sid}catch(e){}}const TransferEvents={Message:"Message",Notify:"Notify",Error:"error"},TransferStatus={Initial:0,Connecting:1,Connected:2,Disconnecting:3,Disconnected:4,Error:9},TransferStatusText=["Initial","Connecting","Connected","Disconnecting","Disconnected","Error"],KeepaliveMinInterval=3;class TransferBase{constructor(e,t){this.name=e.name||"",this.type=e.type||this.name,this.settings=Object.assign({reconnectPeriod:2e3,enabled:!0},e||{}),this.status=TransferStatus.Initial,this.enabled=this.settings.enabled,this.endpoint=null,this.eventbus=t.eventbus,this.host=t.host,this.ready()}refresh(e){Object.assign(this.settings,e),this.stopHeartbeat(),this.status===TransferStatus.Connected&&this.reconnect()}toString(){return this.name}startHeartbeat(){let e=0,t=parseInt(this.settings.heartbeat||30);!this._heartbeatId&&t>=KeepaliveMinInterval&&(this.stopHeartbeat(),this._heartbeatId=setInterval(()=>{e+=1,this.status===TransferStatus.Connected?this.send(VoerkaMessage.Heartbeat({from:this.host.sn,count:e})):e=0},1e3*t))}stopHeartbeat(){clearInterval(this._heartbeatId),this._heartbeatId=0}ready(){}async connect(){}async _connect(){if([TransferStatus.Initial,TransferStatus.Error,TransferStatus.Disconnected].includes(this.status)){this._changeStatus(TransferStatus.Connecting);try{logger.debug(_("Transfer <{name}>  is being connecting").params(this.toString())),await this.connect()}catch(e){logger.error(_("Error while connect to <{name}>:{error}").params(this.toString(),e.stack)),this._changeStatus(TransferStatus.Error,e)}}}async disconnect(){}async _disconnect(){if([TransferStatus.Connected].includes(this.status)){this.stopHeartbeat(),this._changeStatus(TransferStatus.Disconnecting);try{logger.debug(_("{name} is being disconnect").params(this.toString())),await this.disconnect(),this._changeStatus(TransferStatus.Disconnected)}catch(e){logger.error(_("Error while disconnect from transfer <{name}>:{error}").params(this.toString(),e.stack)),this._changeStatus(TransferStatus.Error,e)}}}async reconnect(){}send(e){if(this.status!==TransferStatus.Connected)return void logger.warn(_("Transfer <{name}> is disconnected,message cannot send:{msg}").params(this.name,JSON.stringify(e)));let t=e.__options__||{};delete e.__options__;let s="";try{s=this.convertAddress(e,t)}catch(t){logger.debug(_("Error while transfer address {to} : {err}").params(e.to,t.stack))}if(s){let a=this.serializeMessage(e);this.transfer(s,a,t)}}async broadcast(e,t=0,s={}){}async transfer(e,t,s){}convertAddress(e,t={}){}serializeMessage(e){return compressMessage(e),serialize(e)}deserializeMessage(e){return deserialize(e)}_changeStatus(e,t){this.status!==e&&(this.status=e,this.statusText=t||(e in TransferStatusText?TransferStatusText[e]:""),this.eventbus.emit(TransferEvents.Notify,this,e,this.statusText),logger.debug(_("MQTT transfer'status change to : {status}").params(this.statusText)))}onConnected(){this._changeStatus(TransferStatus.Connected),this.startHeartbeat()}onDisconnected(){this._changeStatus(TransferStatus.Disconnected),this.stopHeartbeat()}onReconnect(){logger.debug(_("{name} is reconnecting...").params(this.toString())),this._changeStatus(TransferStatus.Connecting)}async onMessage(e,t={}){let s=null;try{(s=this.deserializeMessage(e,t)).to=String(s.to),s.from=String(s.from)}catch(e){logger.debug(_("Error while decode message:{error}").params(e.stack)),logger.debug(_("Message:{msg}").params(JSON.stringify(s)))}s&&this.eventbus.emit(TransferEvents.Message,this,s)}onHostChange(e){}onError(e){this._changeStatus(TransferStatus.Error,e)}async reset(){let e=this.status;await this._disconnect(),this.status=TransferStatus.Initial,this.ready(),e===TransferStatus.Connected&&await this._connect()}}module.exports={TransferEvents:TransferEvents,TransferStatus:TransferStatus,TransferBase:TransferBase};