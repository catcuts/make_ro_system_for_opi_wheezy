/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const ServiceBase=require("core/service/servicebase"),{TransferEvents:TransferEvents,TransferStatus:TransferStatus}=require("./transfers/base"),EventEmiter=require("events").EventEmitter,SessionManager=require("utils/session").SessionManager,async=require("async"),{MessageTypeNames:MessageTypeNames}=require("core/protocols/vimp/constants"),Notifys=require("core/eventbus/notifys"),assert=require("assert"),{asyncSleep:asyncSleep}=require("utils/asyncutil"),VoerkaMessages=require("core/protocols/vimp/message");class VoerkaMessageClient extends ServiceBase{constructor(e,s){super(e,s),this.eventbus=new EventEmiter,this.deviceCaches={},this.transfers={},this.sessionManager=new SessionManager({sessionMaxId:this.attrs.session.sessionMaxId||65535,sessionName:this.attrs.session.sessionName||"sid",sender:this.send.bind(this)})}async init(){await this.loadTransfers()}get connected(){return this.transfer.status===TransferStatus.Connected}async onMessage(e){this.send(e.payload,!1)}assertReady(){super.assertReady(),assert(this.connected&&(0===VIGateway.mode||1===VIGateway.mode),_("VMC is unavailable or disconnected"))}async send(e,s=!1,r={}){if(this.connected){if(e.from||(e.from=this.host.sn),e.__options__=r,s){let s=null;return e.sid?s=this.transfer.getSession(e.sid):(s=this.createSession(),e.sid=s.id),await s.send(e,!0)}this.transfer.send(e,!1)}else logger.debug(_("VMC is disconnected,cannot send message:{msg}").params(JSON.stringify(e)))}async sendToGroup(e,s,r=!1){if(this.connected){if(s.__options__||(s.__options__={}),s.__options__.group=e,r)return await this.send(s,r);this.send(s)}else logger.debug(_("VMC is disconnected,cannot send message:{msg}").params(JSON.stringify(s)))}async onNotify(e){switch(e.event){case Notifys.HostAttrsChange:this.onHostChange(e.attrs);break;case Notifys.HostModeChange:this.onHostModeChange(e.mode);break;case Notifys.HostRestart:this.triggerEvent({code:VoerkaConsts.DeviceEventCodes.DeviceShutdown})}}async update(e,s=!1){await super.update(e,s),"transfers"in e&&await this.loadTransfers()}get transfer(){return this.transfers[this.attrs.outbound||"mqtt"]}async loadTransfers(){if(!R.isEmpty(this.transfers)){for(let e in this.transfers)try{let s=this.transfers[e];await s._disconnect(),delete this.transfers[e]}catch(s){logger.error(_("Error while unload voerka transfer <{name}>:{error}").params(e,s.stack))}this.eventbus.off(TransferEvents.Message,this._receivedMessageFromTransfer),this.eventbus.off(TransferEvents.Notify,this._notifyMessageFromTransfer),this.eventbus.off(TransferEvents.Error,this._errorMessageFromTransfer)}this.transfers={};for(let e of this.attrs.transfers||[])try{let s=new(require("./transfers/"+e.type))(e,this);this.transfers[s.name]=s}catch(s){logger.error(_("Error while load voerka transfer <{name}>:{error}").params(e.name,s.stack))}R.isEmpty(this.transfers)?logger.warn(_("No transfer module is loaded. VoerkaMessageClient can not work")):(this._receivedMessageFromTransfer=this._receivedMessageFromTransfer.bind(this),this._notifyMessageFromTransfer=this._notifyMessageFromTransfer.bind(this),this._errorMessageFromTransfer=this._errorMessageFromTransfer.bind(this),this.eventbus.on(TransferEvents.Message,this._receivedMessageFromTransfer),this.eventbus.on(TransferEvents.Notify,this._notifyMessageFromTransfer),this.eventbus.on(TransferEvents.Error,this._errorMessageFromTransfer))}_receivedMessageFromTransfer(e,s){try{this.publishSubjectMessage(MessageTypeNames[s.type].toLowerCase(),s)}catch(e){logger.debug(_("Error when publish messages to event bus:{msg}").params(JSON.stringify(s)))}let r=!1;if(s.sid>0){let e=this.getSession(s.form,s.sid);e&&(r=!0,e.next(s))}r||this.dispatchMessage(s)}isSession(e){return this.sessionManager.isSession(e)}getSession(e,s){return this.sessionManager.getSession(s,e)}createSession(e="default"){return this.sessionManager.createSession(e)}dispatchMessage(e){let s=e.to.split(","),r="";if(s.length>0)for(let t of s){let s=VIGDevices.getDevice(t);r=s?"devicetype.{name}".params(s.type.toLowerCase()):"devicetype.vigateway",this.node.send(r,e)}else logger.debug(_("Unable to dispatch the received message:{error}").params(err,JSON.stringify(e)))}_notifyMessageFromTransfer(e,s,r){this.node.notify(100+s,{transfer:e,message:r})}_errorMessageFromTransfer(e,s){this.error(s,{transfer:e})}on(e,s){this.eventbus.on(e,s)}off(e,s){this.eventbus.off(e,s)}get host(){return this._host||VIGateway}set host(e){this._host=e}onHostChange(e){R.any(e=>R.contains(e)(["domain","group"]))(R.keys(e))?async.parallel(R.keys(this.transfers).map(s=>async()=>{await this.transfers[s].onHostChange(e)}),(e,s)=>{e&&logger.error(_("Error while trigger OnHostChange event in service <vmc>: {error}").params(e.message))}):R.any(e=>R.contains(e)(["mqtt","network"]))(R.keys(e))&&setTimeout(()=>{this.refresh().then(()=>{logger.debug(_("Service <VMC> is restart success"))}).catch(e=>{logger.error(_("Error while restarting Service <VMC> : {err}").params(e.message))})},1e3)}onHostModeChange(e){1===e?this._stop().then(()=>{logger.info(_("The service <vmc> is stoped,because enter discover mode."))}):this._start().then(()=>{logger.info(_("The service <vmc> is restart."))})}async restart(){if(!this.isrestarting){this.isrestarting=!0;try{await this.init(),await this._stop(),await asyncSleep(2e3),await this._start()}catch(e){logger.warn(_("Error while restart service:{err}").params(e.message))}this.isrestarting=!1}}async start(){for(let e in this.transfers)try{await this.transfers[e]._connect(),logger.debug(_("Trnasfer <{name}> is starts.").params(e))}catch(s){logger.error(_("Error while start transfer <{name}>:{error}").params(e,s.stack))}}async stop(){try{this.sessionManager.clearSessions();for(let e in this.transfers)await this.transfers[e]._disconnect()}catch(e){logger.error(_("Error while disconnect transfer:{error}").params(e.stack))}}sendMessage(e,s,r){Array.isArray(e)||(e=[e]);for(let r of e){"string"==typeof r||r.sn;try{this.transfer.send(s)}catch(e){logger.debug(_("Error while send message <{message}> through voerkamessageclient :{error}").params())}}}triggerEvent({...e},s={}){let r=VoerkaMessages.Event({...e});r.__options__=s,this.send(r,!1)}triggerAlarm({...e},s={}){let r=VoerkaMessages.Alarm({...e});r.__options__=s,this.send(r,!1)}triggerStatus({status:e={},...s}={},r={}){let t=VoerkaMessages.StatusChangeEvent({status:e,...s});t.__options__=r,this.send(t,!1)}async triggerAttrs({attrs:e={},...s}={},r={}){let t=VoerkaMessages.AttrsChangeEvent({attrs:e,...s});t.__options__=r,this.send(t,!1)}async sendAnswer({code:e=200,message:s="",payload:r={},...t}={},a={}){let n=VoerkaMessages.Answer({code:e,message:s,payload:r,...t});n.__options__=a,this.send(n,!1)}}module.exports=VoerkaMessageClient;