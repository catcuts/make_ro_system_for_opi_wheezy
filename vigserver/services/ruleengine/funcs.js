/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const VIMP=require("core/protocols/vimp/message"),generateTid=require("core/transactions").generateTid,{extractJsonItems:extractJsonItems}=require("utils/jsonfuncs"),TransRules=require("core/protocols/transform/rules"),{getPayloadRulesParams:getPayloadRulesParams,getPayloadRuleByMessage:getPayloadRuleByMessage}=require("core/protocols/transform/utils"),dayjs=require("dayjs");function parseTargetDevices(e,t){let s=[],r=[];try{"string"==typeof t&&t.indexOf(",")>-1?s=t.split(","):Array.isArray(t)||(s=[t]);for(let t of s){let s=null;if("object"==typeof t)s=[t];else if("string"==typeof t)if(t.startsWith("#"))s=e.findDevices("sn",t.substr(1));else if(t.startsWith("@"))s=e.findDevices("type",t.substr(1));else if(t.startsWith("!")){let r=t.substr(1).split("=");s=e.findDevices(r[0],r[1])}else s=e.findDevices("name",t);s&&r.push(...s)}}catch(e){logger.error(_("Cannot parse devices from <{sn}>").params(t))}return r}function getDeviceTypeInstance(e){try{return VIGDevices.getDeviceTypeBySn(e)}catch(e){logger.warn(_("The type of the unknown {sn} device").params(sender.sn))}}function Answer(e=200,t="",s=!0,r={}){let a=this.device;logger.debug("[Rule]Answer to :"+a.sn);let i=s?this.tid>0?this.tid:generateTid():0;if(this.DeviceManager.isChildDevice(a.sn)){let s=getDeviceTypeInstance(a.sn);s&&s.sendMessageToDevice(VIMP.Answer({to:a.sn,code:e,tid:i,message:t,payload:r}))}else logger.warn(_("Invalid child of device:{sn}").params(a.sn))}function getNotifyParamRules(e,t){return t=String(t),getPayloadRuleByMessage(TransRules,"Notify",e,t)}function extractPayloadParams(e,t){let s={},r={};for(let a in t){let i=t[a],n=void 0===i.to?a:i.to;void 0!==i.valuetype&&(r[n]=i.valuetype),s[n]=e[a]}return[s,r]}function Now(e){void 0===e&&(e=VIGateway.attrs.dateTimeFormat||"YYYYMMDDHHmmss");try{return dayjs().format(e)}catch(e){return dayjs().format("YYYYMMDDHHmmss")}}function Notice(e="",t=0,s="",r={}){logger.debug("[Rule]Notice to :"+e),r=Object({ignoreSource:!0,level:3},r);let a=parseTargetDevices(this.DeviceManager,e);if(0===a.length)logger.warn(_("Notice target <{target}> is invalid.").params(e));else{let i=this.message.from;for(let n of a){let a=n.sn;if(this.DeviceManager.isChildDevice(n)&&this.DeviceManager.isValid(a)&&r.ignoreSource&&i!==a)try{let e=getDeviceTypeInstance(n.sn),o=getPayloadRuleByMessage(TransRules,"Notify",e.name,t),[c,l]=extractPayloadParams(this.message.payload,o);e&&e.sendMessageToDevice(VIMP.Notify({to:a,tid:this.tid,source:i,message:s,code:t,level:r.level,payload:c,__paramtypes__:l}))}catch(e){logger.warn(_("Error while notice to device<{sn}>:{error}").params(a,e.message))}else logger.warn(_("Unable notice device <{target}:{sn}> because device is uncertified or invalid child device.").params(e,a))}}}function Execute(e="",t="",s={}){let r=parseTargetDevices(this.DeviceManager,e);if(0===r.length)logger.warn(_("Notice target <{target}> is invalid.").params(e));else for(let e of r)if(this.DeviceManager.isChildDevice(e))try{let r=getDeviceTypeInstance(e.sn);r&&r.sendMessageToDevice(VIMP.Action({to:e.sn,tid:tid,action:t,payload:s}))}catch(t){logger.warn(_("Error while execute action on device<{sn}>:{error}").params(e.sn,t.message))}}function SetAttrs(e=""){let t=parseTargetDevices(this.DeviceManager,e);if(0===t.length)logger.warn(_("SetAttrs target <{target}> is invalid.").params(e));else{let e={},s=!0;if(2===arguments.length?s="object"==typeof arguments[1]:3===arguments.length?(s="string"==typeof arguments[1]&&void 0!==arguments[2]&&"object"!=typeof arguments[2],e={[arguments[1]]:arguments[2]}):s=!1,!s)return void logger.warn(_("Rule function <SetAttrs> parameter is invalid."));for(let s of t)if(this.DeviceManager.isChildDevice(s)&&this.DeviceManager.isValid(s.sn))try{let t=getDeviceTypeInstance(s.sn);t&&t.noticeUpdateDeviceAttrs(s.sn,e)}catch(e){logger.warn(_("Error while update attrs on device<{sn}>:{error}").params(s.sn,e.message))}}}function getFuncs(){return{Answer:Answer,Notice:Notice,Execute:Execute,SetAttrs:SetAttrs,Now:Now}}module.exports={getFuncs:getFuncs,Answer:Answer,Notice:Notice,Execute:Execute,SetAttrs:SetAttrs};