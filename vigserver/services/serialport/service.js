/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const ServiceBase=require("core/service/servicebase"),SerialPort=require("serialport");async function findSerialports(){return await new Promise((r,e)=>{SerialPort.list((t,a)=>{t?e(t):r(a)})})}function calcCheckSumForHex(r){let e=0;for(let t=0;t<r.length;t+=2)e+=parseInt(r.substr(t,2),16);return(e&=255).toString(16)}function serialportMessage({name:r="",port:e="",data:t=""}={}){return{name:r,port:e,timestamp:(new Date).getTime(),data:t}}function serialportErrorMessage(r){return{timestamp:(new Date).getTime(),error:r}}function serialportSubject(r,e="data"){return"serialport."+r.name.toLowerCase()+"."+e}function serialportErrorSubject(r){return serialportSubject(r,"error")}function SerialPortError(r=0){let e=new Error("SerialPortError");return e.code=r,e}class SerialportService extends ServiceBase{init(){this.drivers={}}openSerialPorts(){for(let r of this.attrs.ports)if(!1!==r.enabled)try{let e=r.driver||"simple",t=new(require("./drivers/"+e))(r);t.onData=this.readFromSerialPort.bind(this),t.onError=this.errorInSerialPort.bind(this),t.open(),this.drivers[r.name]=t}catch(e){logger.error(_("Error while open serialport {port} in service <{service}>: {message}").params(r.port,this.name,e.stack))}}closeSerialPorts(){for(let r in this.drivers)try{this.drivers[r].close()}catch(r){}this.drivers={}}write(r,e){this.drivers[r].put(e)}readFromSerialPort(r,e){try{try{let t=serialportMessage({name:r.name,port:r.port,data:e});this.node.publish(serialportSubject(r),t)}catch(e){logger.error(_("Error while send data in serialport <{driver}>:{error}").params(r.name,e.stack)),this.node.publish(serialportErrorSubject(r),serialportErrorMessage(e))}}catch(e){logger.error(_("Error while unpack data from serialport <{driver}>:{error}").params(r.name,e.stack)),this.node.publish(serialportErrorSubject(r),serialportErrorMessage(e))}}errorInSerialPort(r,e){logger.debug(_("the serialport <{port}> has been error:{error}").params(r.port,e)),this.node.error(e,{port:r})}onMessage(r){let e=r.port;if(e)if(e in this.drivers){this.drivers[e].ready?this.write(e,r.data):logger.warn(_("Serialport driver <{port}> is not ready.").params(e))}else logger.debug(_("Invalid serialport port in <{msg}>").params(JSON.stringify(r)));else logger.warn(_("Serialport service cannot accept message <{message}>. format:{port:<>,data:<>}").params(r))}stop(){try{this.closeSerialPorts()}catch(r){logger.warn(_("Error while stop serialport service:{err}").params(r.stack))}}async start(){this.openSerialPorts()}}module.exports=SerialportService;