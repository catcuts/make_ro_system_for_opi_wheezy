/*　China Fujian Huanyutong Technology Co., Ltd. */
const SerialPort=require("serialport"),{SerialportDriverBase:SerialportDriverBase,SerialPortError:SerialPortError}=require("./base"),Struct=require("varstruct"),Header=Buffer.from([255,0,255,0,255,0,255,0]),{formatVampMessage:formatVampMessage}=require("core/protocols/vamp/utils");function calcCheckSum(e){let t=0;try{for(let a of e)t+=a}catch(e){logger.warn(_("Check sum cannot be calculated"))}return 255&t}function verifyCheckSum(e,t){if(0===t)return!0;let a=calcCheckSum(e);return a===t||(logger.warn(_("check sum {sum1} mismatch,calculation result={sum2}.").params(t,a)),t===calcCheckSum(e))}const CommandTypes={Ready:1,Reset:2,Config:3,Data:4},AnswerTypes={Answer:1,Data:2},CommandMessageStruct=Struct([{name:"header",type:Struct.Value(Struct.Buffer(8),Header)},{name:"checkSum",type:Struct.Byte},{name:"cmd",type:Struct.Byte},{name:"payload",type:Struct.VarBuffer(Struct.Int16BE)}]),AnswerMessageStruct=Struct([{name:"header",type:Struct.Value(Struct.Buffer(8),Header)},{name:"code",type:Struct.Byte},{name:"payload",type:Struct.VarBuffer(Struct.UInt16BE)},{name:"checkSum",type:Struct.Byte}]);function DataCommand(e){let t=calcCheckSum(e);return CommandMessageStruct.encode({cmd:CommandTypes.Data,checkSum:t,payload:e})}function configCommand(e,t){try{let e=AnswerMessageStruct.decode(data);if(verifyCheckSum(e.payload,e.checkSum))return e.payload}catch(e){throw new Error(_("Error while decode serialport data {data}").params(data))}}function encodeMessage(e){if(!Buffer.isBuffer(e))throw new Error(_("Send to serialport'data must be buffer type {data}").params(e));let t=calcCheckSum(e);try{return CommandMessageStruct.encode({cmd:CommandTypes.Data,checkSum:t,payload:e})}catch(t){throw new Error(_("Error while encode serialport data {data}").params(e))}}function decodeMessage(e){let t={};if(verifyCheckSum((t=AnswerMessageStruct.decode(e)).payload,t.checkSum))return t;throw new Error(_("Serialport data check sum mismatch：[checksum] - {data}").params(t.checkSum,e.toString("hex")))}AskReadyCommand=CommandMessageStruct.encode({cmd:CommandTypes.Ready,checkSum:0,payload:Buffer.alloc(0)}),ResetCommand=CommandMessageStruct.encode({cmd:CommandTypes.Reset,checkSum:0,payload:Buffer.alloc(0)});class VSSPSerialportDriver extends SerialportDriverBase{constructor(e){super(e),this._isReceiveBusy=!1,this._ReceivedCache=Buffer.alloc(0),this._WaitHandleCache=Buffer.alloc(0),this.settings.delimiter=[255,0,255,0,255,0,255,0],this._lastAnswerCode=null,this._session={status:0}}getLastAnswer(){let e=this._lastAnswerCode;this._lastAnswerCode=null;let t="";return e>0&&(t=["RF board is busy"][e-1]),[e,t]}waitForConfirm(e,t){this.startSession(e,t)}startSession(e,t){this._session={resolve:e,reject:t,status:1},setTimeout(()=>{1===this._session.status&&(this._session.status=0,this._session.reject(new Error("Timeout while wait answer for serialport")))},this.settings.waitAnswerTimeout)}endSession(e,t,a){e===AnswerTypes.Answer?1===this._session.status&&(t>0?this._session.reject(new SerialPortError(...this.getLastAnswer())):this._session.resolve()):e===AnswerTypes.Data?(1===this._session.status&&this._session.resolve(),this.onData(this,a)):this._session.reject(new Error("Unknow Error")),this._session={status:0}}put(e){this.settings.askIsFree&&this.sendQueue.push(AskReadyCommand);try{let t=DataCommand(e);logger.debug("Put to send queue:{data}".params(formatVampMessage(t))),super.put(t)}catch(e){logger.error(_("Error while packed serialport data :{err}").params(e.message))}}onError(e,t){this.endSession(999)}_parseMessage(e){if(this._isReceiveBusy)return void(this._WaitHandleCache=Buffer.concat([this._WaitHandleCache,e]));let t=[];this._isReceiveBusy=!0,this._ReceivedCache=Buffer.concat([this._ReceivedCache,e]);let a=this._ReceivedCache.indexOf(Header);if(-1===a&&this._ReceivedCache.length>Header.byteLength)this._ReceivedCache=Buffer.alloc(0);else if(this._ReceivedCache.byteLength>a+8+1+2)try{let e=this._ReceivedCache.readUInt16BE(a+8+1);for(;a+12+e<=this._ReceivedCache.byteLength;){let s=this._ReceivedCache.slice(a,12+e);logger.debug("Read from serialport[{port}] : {data}".params(this.port,s.toString("hex")));try{let e=decodeMessage(s);t.push(e)}catch(e){if(e instanceof RangeError)break;logger.error(_("Error while decode data from serialport[{port}]: {error}").params(this.port,e.message)),logger.debug(_("Error while decode data: {data}").params(s.toString("hex")))}if(a+=12+e,this._WaitHandleCache.byteLength>0&&(this._ReceivedCache=Buffer.concat([this._ReceivedCache,this._WaitHandleCache]),this._WaitHandleCache=Buffer.alloc(0)),a+8+1+2>this._ReceivedCache.byteLength)break;e=this._ReceivedCache.readUInt16BE(a+8+1)}this._ReceivedCache=this._ReceivedCache.slice(a)}catch(e){}return this._WaitHandleCache.byteLength>0&&(this._ReceivedCache=Buffer.concat([this._ReceivedCache,this._WaitHandleCache]),this._WaitHandleCache=Buffer.alloc(0)),this._isReceiveBusy=!1,t}_onData(e){let t=this._parseMessage(e);for(let e of t)e.code===AnswerTypes.Answer?(2===e.payload.length?this._lastAnswerCode=e.payload.readInt16BE():this._lastAnswerCode=e.payload.readUInt8(),this.endSession(e.code,this._lastAnswerCode)):e.code===AnswerTypes.Data?(this.endSession(e.code,this._lastAnswerCode,e.payload),this._lastAnswerCode=null):(this._lastAnswerCode=null,this.endSession(null,this._lastAnswerCode),logger.warn(_("Received invalid answer {code} from serialport[{port}]").params(e.code,this.port)))}}module.exports=VSSPSerialportDriver;