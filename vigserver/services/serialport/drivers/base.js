/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const SerialPort=require("serialport"),Deque=require("double-ended-queue"),pRetry=require("p-retry"),{extractJsonItems:extractJsonItems}=require("utils/jsonfuncs"),{formatVampMessage:formatVampMessage}=require("core/protocols/vamp/utils");function getDefaultSerialport(){return"win32"===process.platform?"COM1":"/dev/ttyS0"}class SerialPortError extends Error{constructor(t,e){super(),this.code=t,this.message=e}}class SerialportDriverBase{constructor(t){this.port=t.port||getDefaultSerialport(),this.name=t.name||t.port,this.sendQueue=new Deque,this.settings=Object.assign({autoOpen:!1,waitAnswerTimeout:1e4,retryCount:3,retryTimeout:500,sendInterval:100,baudRate:115200,rtscts:!1,askIsFree:!0},t),this._intervalId=0,this.isBusy=!1,this.ready=!1}put(t){this.sendQueue.push(t),this.activeSendQueue()}open(){this.endpoint&&this.endpoint.isOpen&&(this.endpoint.close(),this.isOpen=!1),this.endpoint=new SerialPort(this.port,extractJsonItems(this.settings,["autoOpen","baudRate","dataBits","stopBits","parity","rtscts","flowControl","xany","xon","xoff","highWaterMark","encoding"])),this.endpoint.on("data",this._onData.bind(this)),this.endpoint.on("error",this._onError.bind(this)),this.endpoint.on("open",this._onOpen.bind(this)),this.endpoint.on("close",this._onClose.bind(this)),this.endpoint.open()}close(){try{this.endpoint.isOpen&&this.endpoint.close()}catch(t){logger.debug(_("Error while close SerialPort[{port}]:{error}").params(this.endpoint.path,t.stack))}}onOpen(t,e){}onClose(t){}onData(t,e){}onError(t,e){}_onOpen(t){logger.debug(_("SerialPort[{port}] is opened.").params(this.endpoint.path)),this.endpoint.flush(()=>{this.onOpen(this,t),this.ready=!0})}_onClose(){logger.debug(_("SerialPort[{port}] is closed.").params(this.endpoint.path)),this.onClose(this),this.ready=!1}_onError(t){this.onError(this,t)}_onData(t){logger.debug(_("Receiving serial port <{port}> data").params(this.port)),this.onData(this,t)}waitForConfirm(t,e){t(0)}async _write(t){return new Promise((e,r)=>{this.endpoint.write(t,t=>{t?r(t):this.waitForConfirm(e,r)})})}async write(t){if(this.ready){this.isBusy=!0;try{logger.debug(_("Write to serialport[{port}] : {data}").params(this.port,t.toString("hex"))),await this._write(t)}catch(t){logger.error(_("Error while write data to SerialPort[{port}] : {error}").params(this.port,t.message)),this._onError(t)}this.isBusy=!1}else logger.warn(_("Serialport {port} is unopened").params(this.port))}activeSendQueue(){0===this._intervalId&&(this._intervalId=setTimeout(async()=>{this.sendQueue.length>0&&await this.write(this.sendQueue.shift()),this._intervalId=0,this.sendQueue.length>0&&this.activeSendQueue(),logger.debug("SendQueueSize={size}".params(this.sendQueue.length))},this.settings.sendInterval))}}module.exports={SerialportDriverBase:SerialportDriverBase,SerialPortError:SerialPortError};