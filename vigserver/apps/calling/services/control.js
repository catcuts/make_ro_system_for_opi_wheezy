/*　China Fujian Huanyutong Technology Co., Ltd. */
const ServiceBase=require("core/service/servicebase"),VAMP=require("core/protocols/vamp/message"),{MessageTypes:MessageTypes}=require("core/protocols/vamp/constants"),{NormalMessage:NormalMessage,MessageType:EventbusMessageType}=require("core/eventbus/message"),async=require("async"),SessionManager=require("utils/session").SessionManager,SerialportServiceName="service.serialport",VampToVimp=require("core/protocols/transform/vamp2vimp"),Vimp2Vamp=require("core/protocols/transform/vimp2vamp");class CallingControlService extends ServiceBase{init(){super.init(),this.sessionManager=new SessionManager({sessionMaxId:65535,sender:this.sendToDevice.bind(this)})}onStart(){this.host.roaming?(this.node.subscribe("wirelessroaming.data"),this.node.catch("service.wirelessroaming")):(this.node.subscribe("serialport.wirelesscalling.data"),this.node.catch("service.serialport"))}sendToDevice(e){let s={};if(VIGateway.roaming>0);else{try{Buffer.isBuffer(e)?s=e:(logger.debug(_("Send vimp message to device: {message}").params(JSON.stringify(e))),""===e.from&&(e.from=VIGateway.shortSn),s=Vimp2Vamp(e)),logger.debug(_("Send vamp message to device: {message}").params(s.toString("hex")))}catch(e){logger.error(_("Error while convert vimp to vamp:{error}").params(e.message))}VIGEventbus.send(NormalMessage({to:SerialportServiceName,payload:{port:"wirelesscalling",data:s}}))}}isSession(e){return this.sessionManager.isSession(e)}getSession(e,s){return this.sessionManager.getSession(s,e)}createSession(e="default"){return this.sessionManager.createSession(e)}onRegister(e){logger.debug(_("Wireless device <{sn}> is being register.").params(e.from));try{VAMP.decode(e.payload)}catch(s){return logger.debug(_("Error while decode payload of register message :{err}").params(s.stack)),void logger.debug(e.payload.toString("hex"))}deviceInfo.sn=e.from,deviceInfo.gateway="",deviceInfo.type="",async.waterfall([async s=>{try{s(null,await VIGDevices.findOne({sn:e.from,type:deviceInfo.type}))}catch(e){s(e)}},async(e,s)=>{s?await VIGDevices.saveDeviceToStorage(s):(deviceInfo.active=!1,await VIGDevices.addDevice(deviceInfo)),e()}],function(e,s){})}onMessage(e){let s={};try{s=VAMP.decodeMessage(e.payload.data),logger.debug(_("Receive from serialport: {message}").params(JSON.stringify(s)))}catch(s){return void logger.debug(_("Error while decode VAMP message: {msg}").params(e.payload.data.toString("hex")))}let a=VIGDevices.isValid(s.from);if(s.type!==MessageTypes.Answer&&s.type!==MessageTypes.Register&&!a)return void logger.warn(_("Receive unauthorized messages from device<{sn}>").params(s.from));try{switch(s.type){case MessageTypes.Register:s.payload=VAMP.RegisterMessage.decodePayload(s.payload);break;case MessageTypes.Attrs:case MessageTypes.Status:break;case MessageTypes.Event:s.payload=VAMP.EventMessage.decodePayload(s.payload);break;case MessageTypes.Alarm:s.payload=VAMP.AlarmMessage.decodePayload(s.payload);break;case MessageTypes.Notify:s.payload=VAMP.NotifyMessage.decodePayload(s.payload);break;case MessageTypes.Action:s.payload=VAMP.ActionMessage.decodePayload(s.payload);break;case MessageTypes.Message:case MessageTypes.Data:case MessageTypes.Query:break;case MessageTypes.Answer:s.payload=VAMP.AnswerMessage.decodePayload(s.payload);break;case MessageTypes.Heartbeat:break;default:return void logger.debug("Invalid message payload of air")}}catch(e){return logger.debug(_("Error while decode payload of message :{err}").params(e.message)),void logger.debug("‌‌Payload:"+s.payload.toString("hex"))}if(1===s.flags.qos){let e=VAMP.QosAnswerMessage({sid:s.sid,from:VIGateway.shortSn,to:s.from});this.sendToDevice(e)}try{(e=VampToVimp(s)).roaming=s.roaming,logger.debug(_("Receive from serialport(vimp):{msg}").params(JSON.stringify(e)))}catch(e){return logger.error(_("Cannot convert VAMP to VIMP message:{err}").params(e.stack)),void logger.debug("VAMP message:"+JSON.stringify(s))}let r=!1;if(e.sid>0){let s=this.getSession(e.from,e.sid);s&&(r=!0,s.next(e))}r||this.dispatchMessage(e)}dispatchMessage(e){let s="",a=[],r=null;if(0===(a=["","FFFFFFFF","*"].includes(e.to)?[MessageTypes.Answer,MessageTypes.Register,MessageTypes.Event,MessageTypes.Alarm].includes(e.type)?[e.from]:VIGDevices.getDevicetypeNames():[[MessageTypes.Answer,MessageTypes.Register,MessageTypes.Event,MessageTypes.Alarm].includes(e.type)?e.from:e.to]).length)logger.debug(_("Unable to parse the dispatch target:{to}").params(e.to));else for(let o of a)(r=VIGDevices.getDevice(o))?s=r.type?"devicetype.{name}".params(r.type.toLowerCase()):"devicetype.vigateway":e.type===MessageTypes.Register&&(s="devicetype.{name}".params(e.payload.type.toLowerCase())),logger.debug("Dispatch message to :{targets}".params(s)),s?this.node.send(s,e):logger.debug(_("Cannot dispatch the received message:{message}").params(JSON.stringify(e)))}onError(e,s){}}module.exports=CallingControlService;