/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const{Platform:Platform}=require("../platform"),shell=require("shelljs"),path=require("path"),iputils=require("ip-utils"),assert=require("assert"),fs=require("fs"),deepMerge=require("deep-extend"),Notifys=require("core/eventbus/notifys");function compareInterface(e,t){return void 0!==e.dhcp||void 0!==t.dhcp?e.dhcp===t.dhcp:R.all(r=>R.eqProps(r,e,t),["address","gateway","dns"])}class NetworkConfigurator{constructor(e){this.interfaceFile=e||"/etc/network/interfaces",this._validInterfaces=[]}get ready(){return fs.existsSync(this.interfaceFile)}async configure(e){this._assertReady();let t=this._parseInterfaces(fs.readFileSync(this.interfaceFile,{encoding:"utf8"}));for(let r in e)if(!(r in t)||"lo"===r)throw new Error(_("Network interfaces <{name}> is invalid").params(R.keys(e).join(",")));deepMerge(t,e);for(let e in t)t[e].dchp&&(delete t[e].address,delete t[e].netmask,delete t[e].gateway,delete t[e].network,delete t[e].broadcast);let r=this._generateConfig(t);try{fs.writeFileSync(this.interfaceFile,r,{encoding:"utf8"})}catch(e){throw new Error(_("Modifying the network interface error:{error}").params(e.message))}return this.interfaces}_parseInterfaces(e){let t=e.split("\n"),r={},s=null;for(let e of t)if(e.trim().startsWith("iface")){let t=(e=e.trim().replace(/\s+/g," ")).split(" ");t.length>1&&"lo"!==t[1]&&(r[s=t[1]]={},t.length>2&&(r[s].family="inet6"===t[2]?"ipv6":"ipv4"),4===t.length&&["dhcp","static"].includes(t[3])&&(r[s].dhcp="dhcp"===t[3]))}else""===e.trim()&&(s=null),s&&(e.trim().startsWith("address")&&(r[s].address=e.trim().substr(8).trim()),e.trim().startsWith("netmask")&&(r[s].netmask=e.trim().substr(8).trim()),e.trim().startsWith("gateway")&&(r[s].gateway=e.trim().substr(8).trim()),e.trim().startsWith("broadcast")&&(r[s].broadcast=e.trim().substr(10).trim()),e.trim().startsWith("network")&&(r[s].network=e.trim().substr(8).trim()),e.trim().startsWith("dns-nameservers")&&(r[s].dns=e.trim().substr(16).trim().replace(/\s+/g," ").split(" ")));return r}_assertReady(){assert(this.ready,_("Unable to obtain network interface"))}_getInterfacesByIfConfig(){let e=require("network");return new Promise((t,r)=>{e.get_interfaces_list((e,s)=>{if(e)r(e);else{let e=require("dns"),r={};s.forEach(t=>{r[t.name]={address:t.ip_address,gateway:t.gateway_ip,netmask:t.netmask,type:t.type,dns:e.getServers()}}),t(r)}})})}async interfaces(){this._assertReady();let e={};try{let t=fs.readFileSync(this.interfaceFile,{encoding:"utf8"});e=this._parseInterfaces(t)}catch(e){logger.warn(_("Cannot get network interfaces from <{file}>").params(this.interfaceFile))}return R.isEmpty(e)&&(e=await this._getInterfacesByIfConfig()),e}_checkIConfig(e){let t="invalid ip address";return e.address&&assert(iputils.isValidIp(e.address),t),e.netmask&&assert(iputils.isValidIp(e.address),t),e.gateway&&assert(iputils.isValidIp(e.gateway),t),Array.isArray(e.dns)||(e.dns=e.dns.split(" ")),e.dns.forEach(r=>{""!==r.trim()&&assert(iputils.isValidIp(e.address),t)}),e.dns=e.dns.join(" "),e.broadcast&&assert(iputils.isValidIp(e.broadcast),t),e.network&&assert(iputils.isValidIp(e.network),t),!0}_generateConfig(e){let t=[];t.push("auto lo"),t.push("iface lo inet loopback");for(let r in e){let s=e[r=r.toLowerCase()];this._checkIConfig(s),t.push(""),t.push("auto "+r),t.push("iface "+r+" inet "+(s.dhcp?"dhcp":"static")),s.ssid&&t.push("  wpa-ssid "+s.ssid),s.psk&&t.push("  wpa-psk "+s.psk),s.address&&t.push("  address "+s.address),s.netmask&&t.push("  netmask "+s.netmask),s.gateway&&t.push("  gateway "+s.gateway),s.network&&t.push("  network "+s.network),s.broadcast&&t.push("  broadcast "+s.broadcast),s.dns&&t.push("  dns-nameservers "+s.dns)}return t.join("\n")}}class NetworkManager{constructor(e){this.schema=e,this.restarting=!1}async interfaces(){let e=new NetworkConfigurator;if(e.ready){let t=R.keys(this.schema.interfaces),r={};return r=R.isEmpty(t)?await e.interfaces():R.pick(R.keys(this.schema.interfaces),await e.interfaces())}throw new VIMPErrors.UnsupportedError}async configure(e,t=!0){if(R.isEmpty(e))throw new VIMPErrors.ParamError;let r=new NetworkConfigurator;if(!r.ready)throw new VIMPErrors.UnsupportedError;if(logger.debug(_("Configure network interface:{cfgs}").params(JSON.stringify(e))),await r.configure(e),t)try{await this.restart(),logger.debug(_("Network restarts success"))}catch(e){logger.debug(e.message)}return e}get defaultInterfaceName(){return this.schema.default}get defaultWifiInterfaceName(){return this.schema.defaultWifi}async default(){return await this.defaultWire()}async defaultWire(){let e=new NetworkConfigurator;if(e.ready){let t=await e.interfaces();return this.schema.default in t?t[this.schema.default]:R.filter(R.propEq("type","Wired"),R.values(t))[0]}throw new VIMPErrors.UnsupportedError}async defaultWifi(){try{return R.filter(R.propEq("type","Wifi"),R.values(this.schema.interfaces||{}))[0]}catch(e){throw new Error(_("Do not support WiFi"))}}async restart(){if(this.restarting)throw new Error(_("Is restarting"));this.restarting=!0,logger.debug("Ready restart networking..."),VIGEventbus.notify(Notifys.HostRestartNetwork),await new Promise((e,t)=>{setTimeout(()=>{let r;try{r=shell.exec("sudo service networking restart",{silent:!0,timeout:5e3})}catch(e){throw this.restarting=!1,new Error(_("Timeout while restarting network."))}r.stderr?(this.restarting=!1,t(new Error(_("Error while restarting network:{err}").params(String(r.stderr))))):(logger.debug(_("restart networking success.")),e())},3e3)}),this.restarting=!1}async backup(){try{let e=path.join(VIGConsts.Folders.temp,"networks.json"),t=await this.interfaces();return fs.existsSync(e)&&fs.unlinkSync(e),R.isEmpty(t)||fs.writeFileSync(e,JSON.stringify(t),{encoding:"utf-8"}),t}catch(e){return logger.warn(_("Error while backup network config")),!1}}async restore(){let e=path.join(VIGConsts.Folders.temp,"networks.json");if(fs.existsSync(e)){let t,r=new NetworkConfigurator,s=await this.interfaces();try{t=JSON.parse(fs.readFileSync(e,{encoding:"utf-8"}))}catch(t){return logger.warn(_("Cannot parse networks.json:{err}").params(t.message)),void fs.unlinkSync(e)}let i={};for(let e in t)e in s&&(compareInterface(s[e],t[e])||(i[e]=t[e]));if(!R.isEmpty(i)){logger.debug(_("Restore network config to {cfg}").params(JSON.stringify(i)));try{await r.configure(i)}catch(e){logger.warn(_("Error while restore network config"))}}fs.unlinkSync(e)}}}class LinuxPlatform extends Platform{get network(){return this._networkManager||(this._networkManager=new NetworkManager(this.schema.network)),this._networkManager}get timeZone(){let e;try{e=shell.exec("sudo ls -l /etc/localtime | awk '{print $11}' | sed 's/\\/usr\\/share\\/zoneinfo\\///'",{silent:!0,timeout:5e3})}catch(e){throw new Error("Getting timezone error: Timeout")}let t=e.stderr;if(t)throw new Error("Getting timezone error: "+t);return e.stdout.replace(/\n$/,"")}set timeZone(e){let t,r="sudo ln -sf /usr/share/zoneinfo/{TZ} /etc/localtime".params(e);try{t=shell.exec(r,{silent:!0,timeout:5e3})}catch(e){throw new Error("Setting timezone timeout")}let s=t.stderr;if(s)throw new Error("Setting timezone error: "+s);if(this.timeZone!==e)throw new Error("Setting timezone fail");return e}}module.exports={NetworkConfigurator:NetworkConfigurator,NetworkManager:NetworkManager,LinuxPlatform:LinuxPlatform};