/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const EventEmitter=require("events").EventEmitter,SessionManager=require("../../utils/session").SessionManager,assert=require("assert"),PULSE_EVENT="__PULSE__",BROADCAST_EVENT="__BROADCAST__",NOTIFY_EVENT="__NOTIFY__";class EventBus{constructor(e){this.settings=Object.assign({pulse:2e3},e),this.nodes={},this._eventEmitter=new EventEmitter,this._eventEmitter.setMaxListeners(getSettings("eventbus.listenerMaxNumber",0)),this.sessionManager=new SessionManager({sessionMaxId:65535,sender:this.send.bind(this)}),this.reset()}reset(){this._pulseIntervalId&&(clearInterval(this._pulseIntervalId),this._pulseIntervalId=0),this.settings.pulse>0&&(this._pulseIntervalId=setInterval(()=>{this._eventEmitter.emit("pulse")},this.settings.pulse))}connect(e){assert.equal(e.__EVENTBUS_NODE__,!0,_("Connect to eventbus must be a node instance")),this.nodes[e.name]=e,e.options.pulse&&this._eventEmitter.on(PULSE_EVENT,e.onPulse),e.options.broadcast&&this._eventEmitter.on(BROADCAST_EVENT,e.onMessage),this._eventEmitter.on(NOTIFY_EVENT,e.onNotify),e.ready=!0,logger.debug(_("Node <{name}> has been connected to the eventbus.").params(e.name))}disconnect(e){assert.equal(e.__EVENTBUS_NODE__,!0,_("Connect to eventbus must be a node instance"));try{this.unSubscribeAll(e),this._eventEmitter.off(PULSE_EVENT,e.onPulse),this._eventEmitter.off(BROADCAST_EVENT,e.onMessage),this._eventEmitter.off(NOTIFY_EVENT,e.onNotify),e.ready=!1,delete this.nodes[e.name]}catch(t){logger.warn(_("Error while node <{name}> disconnect from eventbus:{err}").params(e.name,t.stack))}}async send(e){if(!(e.to in this.nodes))throw Error(_("Node <%s> not found").params(e.to));try{let t=this.nodes[e.to];await t.onMessage.call(t.context,e.payload)}catch(t){logger.debug(_("Error while send message to eventbus node <{name}> : {error}").params(e.to,t.stack))}}broadcast(e){e.type=1;try{this._eventEmitter.emit(BROADCAST_EVENT,e)}catch(e){logger.error(_("Error while broadcast eventbus message:{err}").params(e.stack))}}notify(e){try{this._eventEmitter.emit(NOTIFY_EVENT,e)}catch(e){logger.error(_("Error while notice eventbus message:{err}").params(e.stack))}}publish(e,t){t.subject=e,t.type=2;try{this._eventEmitter.emit(e,t)}catch(e){logger.error(_("Error while publish eventbus message:{err}").params(e.stack))}}subscribe(e,t){this._eventEmitter.on(t,e.onMessage)}unSubscribe(e,t){this._eventEmitter.removeListener(t,e.onMessage)}unSubscribeAll(e){for(let t of e._subjects)this._eventEmitter.removeListener(t,e.onMessage)}}module.exports=EventBus;