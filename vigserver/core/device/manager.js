/*　China Fujian Huanyutong Technology Co., Ltd. */
const async=require("async"),{VIGModuleManager:VIGModuleManager,VIGModuleStatus:VIGModuleStatus}=require("core/vigmodule"),{extractJsonItems:extractJsonItems}=require("utils/jsonfuncs"),{NormalMessage:NormalMessage}=require("core/eventbus/message");class DeviceManager extends VIGModuleManager{constructor(e){super(e),this.enabledApi=!1,this.enabledWeb=!1,this.moduleType="device",this.storageName="devicetypes",this.host=VIGateway,this.deviceCaches={},this._deviceCacheAttrs=["sn","name","type","dept","owner","customer","enabled","model","remain","mode","parent","authorized"]}updateDeviceStatus(e,t,s){e in this.deviceCaches||(this.deviceCaches[e]={status:{}}),this.deviceCaches[e].status[t]=s,this.vmc.triggerStatus({from:e,status:{[t]:s}})}get vmc(){return void 0===this._vmc&&(this._vmc=VIGServices.getServices("vmc")),this._vmc}getDeviceStatus(e,t,s=null){let a=s;try{e in this.deviceCaches&&t in this.deviceCaches[e].status&&(a=this.deviceCaches[e].status[t])}catch(e){}return a}async updateCaches(e=null){if(null===e){let e=await VIGStorage.getDocument("devices");try{this.deviceCaches={};let t={$or:[{enabled:!0},{enabled:{$exists:!1}}]},s={};this._deviceCacheAttrs.reduce((e,t)=>(e[t]=1,e),s);let a=await e.find(t,s);for(let e of a)this.deviceCaches[e.sn]=e,"status"in this.deviceCaches[e.sn]||(this.deviceCaches[e.sn].status={})}catch(e){logger.debug(_("Error while cacheing devices info：{error}").params(e.stack))}}else this.deviceCaches[e.sn]=extractJsonItems(e,this._deviceCacheAttrs)}async load(){await super.load(),await this.updateCaches()}get devicetypes(){return this.modules}getDevicetypeNames(){return this.modules.map(e=>e.name.toLowerCase())}getModuleClass(e){let t=[e.entry,"devices/"+e.name,"devices/"+e.name.toLowerCase()],s=null,a=null;for(let e of t)try{return s=require(e)}catch(e){null===a&&(a=e)}throw logger.error(_("Cannot load module {module}").params(e.entry)),a}getDeviceType(e){return this.getModuleByName(e)}getDeviceTypeBySn(e){return this.getDeviceType(this.deviceCaches[e].type)}getDeviceTypeName(e){try{return this.deviceCaches[e].type.toLowerCase()}catch(e){return""}}async findOne(e,t){let s=await VIGStorage.getDocument("devices");return t?await s.findOne(e,t):await s.findOne(e)}async find(e,t={}){let s=await VIGStorage.getDocument("devices");return await s.find(e,t)}exists(e){return e in this.deviceCaches}isValid(e){if(!this.exists(e))return!1;let t=this.deviceCaches[e];return(void 0===t.enabled||t.enabled)&&void 0!==t.authorized&&t.authorized}async register(e){await this.addDevice(e)}async addDevice(e){let t=await VIGStorage.getDocument("devices"),s=await t.update({sn:e.sn},e,{upsert:!0,returnUpdatedDocs:!0});return await this.updateCaches(s),s}async saveDeviceToStorage(e,t={}){if("object"!=typeof e&&!("sn"in e))return void logger.error(_("Invalid device params in <saveDeviceToStorage>"));t=Object.assign({multi:!1,upsert:!0,returnUpdatedDocs:!0},t);let s=await VIGStorage.getDocument("devices"),a=await s.update({sn:e.sn},{$set:e},t);return await this.updateCaches(a),a}findDevices(e,t){let s=[];for(let a in this.deviceCaches)e in this.deviceCaches[a]&&this.deviceCaches[a][e]===t&&s.push(this.deviceCaches[a]);return s}getDevice(e){return e in this.deviceCaches?this.deviceCaches[e]:null}isChildDevice(e){return"object"==typeof e&&(e=e.sn),e in this.deviceCaches&&"vigateway"!==this.deviceCaches[e].type}dispatchMessage(e){if(e.to in this.deviceCaches){let t=this.deviceCaches[e.to].type,s="devicetype.vigateway";t&&(s="devicetype.{name}".params(t)),VIGEventbus.send(NormalMessage({to:s,payload:e}))}}}module.exports=DeviceManager;