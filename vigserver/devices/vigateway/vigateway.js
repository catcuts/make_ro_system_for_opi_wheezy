/*ã€€China Fujian Huanyutong Technology Co., Ltd. */
const DeviceTypeBase=require("core/device/devicetype").DeviceTypeBase,DeviceProxyBase=require("core/device/deviceproxy").DeviceProxyBase,Notifys=require("core/eventbus/notifys"),VoerkaMessages=require("core/protocols/vimp/message"),VIMPErrors=require("core/protocols/vimp/errors"),VoerkaConsts=require("core/protocols/vimp/constants"),{TransactionManager:TransactionManager}=require("core/transactions"),VIGLoginStatus={Initial:0,Logining:1,LoginSuccess:2,LoginFail:3};class VIGatewayProxy extends DeviceProxyBase{constructor(e,t){super(e,t),this.loginStatus=VIGLoginStatus.Initial}async reInit(){}updateShortcutAttrs(){this.timeZone=this.attrs.timeZone||"Asia/Shanghai",this.secret=this.attrs.secret||"5cd29c05899347deb711a45f875f65ba",this.port=this.attrs.port||80,this.group=this.attrs.group||"0",this.roaming=this.attrs.roaming,this.roamingGroup=this.attrs.roamingGroup||0,this.domain=this.attrs.domain||0}get mode(){return this.attrs.mode}set mode(e){if((e=parseInt(e))<0||e>2)throw new Error(_("Invalid mode parameter,the range of value is 0-2"));this.devicetype.node.notify(Notifys.HostModeChange,{mode:e}),this.attrs.mode=e,logger.warn(_("switch to <{mode}> mode").params(["Normal","Discover","Factory"][e]))}get debug(){return this.attrs.debug}set debug(e){this.attrs.debug=e,logger.level=e?"DEBUG":"WARN",logger.warn(_("DEBUG switch to <{value}>".params(String(e))))}get isHost(){return this.sn===VIGPlatform.sn}async load(){await super.load(VIGPlatform.sn)}get shortSn(){return this.sn.substr(0,8)}attrsIsCompleted(){return!!this.attrs.mqtt&&(this.attrs.mqtt.broker&&this.attrs.username)}async inRoamingGroup(e){return this.roaming,!1}login(){if(this.loginStatus===VIGLoginStatus.Logining)return;this.loginStatus=VIGLoginStatus.Logining,logger.debug(_("Starting to login..."));let e=this.vmc.createSession(),t=async()=>{if(this.vmc.ready&&this.loginStatus!==VIGLoginStatus.Logining){try{let t=await e.send(VoerkaMessages.Register({from:this.sn,attrs:this.resumeAttrs}));this.handleLogin(t)}catch(e){this.loginStatus=VIGLoginStatus.LoginFail,logger.debug(_("Error while login:{error}").params(e.message))}this.loginStatus!==VIGLoginStatus.LoginSuccess?setTimeout(t,1e4):e.end()}};process.nextTick(t)}handleLogin(e){200===e.payload.code?(logger.debug(_("Login success...")),this.loginStatus=VIGLoginStatus.LoginSuccess,this.devicetype.updateStatus(this.sn,"register",!0),delete e.payload.code,delete e.payload.message,this.devicetype.noticeUpdateDeviceAttrs(this.sn,e.payload),this.devicetype.node.notify(Notifys.HostRegistered)):void 0===e.payload.code||e.type!==VoerkaConsts.MessageTypes.Answer?(this.loginStatus=VIGLoginStatus.LoginFail,logger.debug(_("Login fail,invaild message :{message}").params(JSON.stringify(e)))):(this.loginStatus=VIGLoginStatus.LoginFail,logger.debug(_("Login fail :{code}-{message}").params(e.code,e)))}reLogin(){this.loginStatus=VIGLoginStatus.Initial,this.login()}async onActionUpgrade(e){let t=parseFloat(this.attrs.version),s=Object.assign({version:t,compatible:{versions:[],models:[]},date:null,delay:0,force:!1,url:""},e.payload);if(s.version=parseFloat(s.version),t>=s.version&&!1===s.force)throw new VIMPErrors.ParamError(_("It is not allowed to upgrade to low version unless force=true is specified."));if("string"==typeof s.url&&0===s.url.trim().length)throw new VIMPErrors.ParamError(_("Need to specify the download url for the upgrade"));let r=await TransactionManager.findOne({type:"upgrade",status:1});if(r&&!await r.isComplete()){if(!0!==s.force)throw new VMErrors.FailError(_("Upgrades are in progress"));await r.abort(_("force upgrades abort")),r=null}r=await TransactionManager.create({type:"upgrade",source:"Server",params:s});let i=VIGServices.getServices("monitor");e.payload.tid=r.id,delete e.payload.action;try{await i.upgrade(e.payload)&&(await r.addNode({actor:"monitor",trigger:"server",progress:1}),this.triggerEvent({code:VoerkaConsts.DeviceEventCodes.DeviceTransaction,tid:r.id,message:"Upgrade is progressing",payload:{progress:1,result:1}}))}catch(e){throw e}}}class VIGHost extends DeviceTypeBase{init(){super.init(),VIGateway.devicetype=this}static async getHostProxy(){let e;try{e=new VIGatewayProxy(VIGPlatform.sn),await e.load()}catch(t){await e.loadByQuery({__host__:!0}),await e.update({sn:VIGPlatform.sn})}return e}async loadRemainDevices(){await super.loadRemainDevices(),VIGateway.sn in this.devices&&(VIGateway.devicetype=this,this.devices[VIGateway.sn]=VIGateway)}getProxyClass(){return VIGatewayProxy}isEnableRuleEngine(e){return!1}onAfterAttrsUpdate(e,t){e===this.host.sn&&("mode"in t&&(this.host.mode=t.mode),"logger"in t&&logger.reset(),"debug"in t&&(this.host.debug=t.debug),this.broadcastNotify(Notifys.HostAttrsChange,{attrs:t}))}async onNotify(e){switch(e.event){case Notifys.VMCConnected:this.triggerEvent(VoerkaMessages.Event({code:VoerkaConsts.DeviceEventCodes.Ready})),this.host.login();break;case Notifys.DeviceStatusChange:this.node.notify(Notifys.HostStatusChange,attrs);break;case Notifys.DeviceChildrenAuthorize:this.node.notify(Notifys.DeviceChildrenAuthorize,attrs)}}onActionUpgrade(e){return this.host.onActionUpgrade(e)}sendMessageToDevice(e){return VoerkaMessages.Answer({code:VoerkaConsts.MessageAnswer.OK})}onActionRestart(e){return VIServer.end(),VoerkaMessages.Answer({message:"Is restarting"})}}module.exports=VIGHost;